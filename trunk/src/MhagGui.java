
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.ListModel;
import javax.swing.event.HyperlinkEvent;

/**
 * @program MHAG
 * @ mhagGUI, partially generated by NetBeans IDE
 * @version 1.0
 * @author Tifa@mh3
 */

public class MhagGui extends javax.swing.JFrame {

    /** Creates new form MhagGui */
    public MhagGui() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                rankGroup = new javax.swing.ButtonGroup();
                hunterTypeGroup = new javax.swing.ButtonGroup();
                sexGroup = new javax.swing.ButtonGroup();
                outputGroup = new javax.swing.ButtonGroup();
                buttonGroup1 = new javax.swing.ButtonGroup();
                jTabbedPane1 = new javax.swing.JTabbedPane();
                calculator = new javax.swing.JPanel();
                rank = new javax.swing.JPanel();
                lowRank = new javax.swing.JRadioButton();
                highRank = new javax.swing.JRadioButton();
                hunterType = new javax.swing.JPanel();
                blade = new javax.swing.JRadioButton();
                gunner = new javax.swing.JRadioButton();
                sex = new javax.swing.JPanel();
                male = new javax.swing.JRadioButton();
                female = new javax.swing.JRadioButton();
                setup = new javax.swing.JPanel();
                weaponMenu = new javax.swing.JComboBox();
                headMenu = new javax.swing.JComboBox();
                chestMenu = new javax.swing.JComboBox();
                armsMenu = new javax.swing.JComboBox();
                waistMenu = new javax.swing.JComboBox();
                legsMenu = new javax.swing.JComboBox();
                charmMenu = new javax.swing.JComboBox();
                weaponLabel = new javax.swing.JLabel();
                headLabel = new javax.swing.JLabel();
                chestLabel = new javax.swing.JLabel();
                armsLabel = new javax.swing.JLabel();
                waistLabel = new javax.swing.JLabel();
                legsLabel = new javax.swing.JLabel();
                charmLabel = new javax.swing.JLabel();
                charmSkillLabel = new javax.swing.JLabel();
                weaponSlot1 = new javax.swing.JComboBox();
                weaponSlot2 = new javax.swing.JComboBox();
                weaponSlot3 = new javax.swing.JComboBox();
                headSlot1 = new javax.swing.JComboBox();
                headSlot2 = new javax.swing.JComboBox();
                headSlot3 = new javax.swing.JComboBox();
                chestSlot1 = new javax.swing.JComboBox();
                chestSlot2 = new javax.swing.JComboBox();
                chestSlot3 = new javax.swing.JComboBox();
                armSlot1 = new javax.swing.JComboBox();
                armSlot2 = new javax.swing.JComboBox();
                armSlot3 = new javax.swing.JComboBox();
                waistSlot1 = new javax.swing.JComboBox();
                waistSlot2 = new javax.swing.JComboBox();
                waistSlot3 = new javax.swing.JComboBox();
                legSlot1 = new javax.swing.JComboBox();
                legSlot2 = new javax.swing.JComboBox();
                legSlot3 = new javax.swing.JComboBox();
                charmSlot1 = new javax.swing.JComboBox();
                charmSlot2 = new javax.swing.JComboBox();
                charmSlot3 = new javax.swing.JComboBox();
                charmSkill1 = new javax.swing.JComboBox();
                charmSkill2 = new javax.swing.JComboBox();
                skillPoint1 = new javax.swing.JLabel();
                skillPoint2 = new javax.swing.JLabel();
                output = new javax.swing.JPanel();
                text = new javax.swing.JRadioButton();
                html = new javax.swing.JRadioButton();
                code = new javax.swing.JRadioButton();
                saveOutput = new javax.swing.JButton();
                jTextData = new javax.swing.JTextField();
                jLabel1 = new javax.swing.JLabel();
                jScrollPreview = new javax.swing.JScrollPane();
                jTextPreview = new javax.swing.JTextArea();
                setNamePanel = new javax.swing.JPanel();
                jTextSetName = new javax.swing.JTextField();
                viewer = new javax.swing.JPanel();
                jScrollPreview2 = new javax.swing.JScrollPane();
                jTextPreview2 = new javax.swing.JTextArea();
                codeBook = new javax.swing.JPanel();
                codeBookName = new javax.swing.JTextField();
                codeBookLoad = new javax.swing.JButton();
                codeBookSave = new javax.swing.JButton();
                convert = new javax.swing.JPanel();
                convertTEXT = new javax.swing.JRadioButton();
                convertHTML = new javax.swing.JRadioButton();
                Output = new javax.swing.JButton();
                jScrollPane1 = new javax.swing.JScrollPane();
                codeList = new javax.swing.JList();
                loadSetInteract = new javax.swing.JButton();
                getSetInteract = new javax.swing.JButton();
                deleteInteract = new javax.swing.JButton();
                undoInteract = new javax.swing.JButton();
                generator = new javax.swing.JPanel();
                about = new javax.swing.JPanel();
                jScrollAbout = new javax.swing.JScrollPane();
                jEditorAbout = new javax.swing.JEditorPane();
                jLabel2 = new javax.swing.JLabel();
                jScrollUsage = new javax.swing.JScrollPane();
                jTextUsage = new javax.swing.JTextArea();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("MHAG: Monster Hunter Armor Generator   Ver 1.0 beta");
                setResizable(false);

                jTabbedPane1.setFont(new java.awt.Font("Monospaced", 1, 14));
                jTabbedPane1.setOpaque(true);

                rank.setBorder(javax.swing.BorderFactory.createTitledBorder("Rank"));
                rank.setToolTipText("Change rank type, reset set");

                rankGroup.add(lowRank);
                lowRank.setFont(new java.awt.Font("Monospaced", 0, 12));
                lowRank.setText("Low Rank");
                lowRank.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                lowRankActionPerformed(evt);
                        }
                });

                rankGroup.add(highRank);
                highRank.setFont(new java.awt.Font("Monospaced", 0, 12));
                highRank.setSelected(true);
                highRank.setText("High Rank");
                highRank.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                highRankActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout rankLayout = new javax.swing.GroupLayout(rank);
                rank.setLayout(rankLayout);
                rankLayout.setHorizontalGroup(
                        rankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rankLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(rankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lowRank)
                                        .addComponent(highRank))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                rankLayout.setVerticalGroup(
                        rankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(rankLayout.createSequentialGroup()
                                .addComponent(lowRank)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highRank))
                );

                hunterType.setBorder(javax.swing.BorderFactory.createTitledBorder("Hunter Type"));
                hunterType.setToolTipText("Change hunter type, reset set");

                hunterTypeGroup.add(blade);
                blade.setFont(new java.awt.Font("Monospaced", 0, 12));
                blade.setSelected(true);
                blade.setText("Blademaster");
                blade.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                bladeActionPerformed(evt);
                        }
                });

                hunterTypeGroup.add(gunner);
                gunner.setFont(new java.awt.Font("Monospaced", 0, 12));
                gunner.setText("Gunner");
                gunner.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                gunnerActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout hunterTypeLayout = new javax.swing.GroupLayout(hunterType);
                hunterType.setLayout(hunterTypeLayout);
                hunterTypeLayout.setHorizontalGroup(
                        hunterTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(hunterTypeLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(blade))
                        .addGroup(hunterTypeLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(gunner)
                                .addContainerGap(35, Short.MAX_VALUE))
                );
                hunterTypeLayout.setVerticalGroup(
                        hunterTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(hunterTypeLayout.createSequentialGroup()
                                .addComponent(blade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gunner))
                );

                sex.setBorder(javax.swing.BorderFactory.createTitledBorder("Gender"));
                sex.setToolTipText("Switch armor names");

                sexGroup.add(male);
                male.setFont(new java.awt.Font("Monospaced", 0, 12));
                male.setSelected(true);
                male.setText("Male");
                male.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                maleActionPerformed(evt);
                        }
                });

                sexGroup.add(female);
                female.setFont(new java.awt.Font("Monospaced", 0, 12));
                female.setText("Female");
                female.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                femaleActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout sexLayout = new javax.swing.GroupLayout(sex);
                sex.setLayout(sexLayout);
                sexLayout.setHorizontalGroup(
                        sexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sexLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(sexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(male)
                                        .addComponent(female))
                                .addContainerGap(30, Short.MAX_VALUE))
                );
                sexLayout.setVerticalGroup(
                        sexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sexLayout.createSequentialGroup()
                                .addComponent(male)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(female))
                );

                setup.setBorder(javax.swing.BorderFactory.createTitledBorder("Setup"));
                setup.setPreferredSize(new java.awt.Dimension(625, 390));

                weaponMenu.setFont(new java.awt.Font("Monospaced", 0, 12));
                weaponMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Slot", "1 Slot", "2 Slots", "3 Slots" }));
                weaponMenu.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                weaponMenuActionPerformed(evt);
                        }
                });

                headMenu.setFont(new java.awt.Font("Monospaced", 0, 12));
                headMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                headMenu.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                headMenuActionPerformed(evt);
                        }
                });

                chestMenu.setFont(new java.awt.Font("Monospaced", 0, 12));
                chestMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                chestMenu.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chestMenuActionPerformed(evt);
                        }
                });

                armsMenu.setFont(new java.awt.Font("Monospaced", 0, 12));
                armsMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                armsMenu.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                armsMenuActionPerformed(evt);
                        }
                });

                waistMenu.setFont(new java.awt.Font("Monospaced", 0, 12));
                waistMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                waistMenu.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                waistMenuActionPerformed(evt);
                        }
                });

                legsMenu.setFont(new java.awt.Font("Monospaced", 0, 12));
                legsMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                legsMenu.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                legsMenuActionPerformed(evt);
                        }
                });

                charmMenu.setFont(new java.awt.Font("Monospaced", 0, 12));
                charmMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                charmMenu.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                charmMenuActionPerformed(evt);
                        }
                });

                weaponLabel.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
                weaponLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/weapon.png"))); // NOI18N
                weaponLabel.setLabelFor(weaponMenu);
                weaponLabel.setToolTipText("Weapon");

                headLabel.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
                headLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/head.png"))); // NOI18N
                headLabel.setLabelFor(headMenu);
                headLabel.setToolTipText("Head");

                chestLabel.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
                chestLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/chest.png"))); // NOI18N
                chestLabel.setLabelFor(chestMenu);
                chestLabel.setToolTipText("Chest");

                armsLabel.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
                armsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/arms.png"))); // NOI18N
                armsLabel.setLabelFor(armsMenu);
                armsLabel.setToolTipText("Arms");

                waistLabel.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
                waistLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/waist.png"))); // NOI18N
                waistLabel.setLabelFor(waistMenu);
                waistLabel.setToolTipText("Waist");

                legsLabel.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
                legsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/legs.png"))); // NOI18N
                legsLabel.setLabelFor(legsMenu);
                legsLabel.setToolTipText("Legs");

                charmLabel.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 12));
                charmLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/charm.png"))); // NOI18N
                charmLabel.setLabelFor(charmMenu);
                charmLabel.setToolTipText("Charm");

                charmSkillLabel.setFont(new java.awt.Font("Monospaced", 0, 12));
                charmSkillLabel.setLabelFor(charmSkill1);
                charmSkillLabel.setText("Charm Skill");

                weaponSlot1.setFont(new java.awt.Font("Monospaced", 0, 12));
                weaponSlot1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                weaponSlot1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                weaponSlot1ActionPerformed(evt);
                        }
                });

                weaponSlot2.setFont(new java.awt.Font("Monospaced", 0, 12));
                weaponSlot2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                weaponSlot2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                weaponSlot2ActionPerformed(evt);
                        }
                });

                weaponSlot3.setFont(new java.awt.Font("Monospaced", 0, 12));
                weaponSlot3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                weaponSlot3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                weaponSlot3ActionPerformed(evt);
                        }
                });

                headSlot1.setFont(new java.awt.Font("Monospaced", 0, 12));
                headSlot1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                headSlot1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                headSlot1ActionPerformed(evt);
                        }
                });

                headSlot2.setFont(new java.awt.Font("Monospaced", 0, 12));
                headSlot2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                headSlot2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                headSlot2ActionPerformed(evt);
                        }
                });

                headSlot3.setFont(new java.awt.Font("Monospaced", 0, 12));
                headSlot3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                headSlot3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                headSlot3ActionPerformed(evt);
                        }
                });

                chestSlot1.setFont(new java.awt.Font("Monospaced", 0, 12));
                chestSlot1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                chestSlot1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chestSlot1ActionPerformed(evt);
                        }
                });

                chestSlot2.setFont(new java.awt.Font("Monospaced", 0, 12));
                chestSlot2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                chestSlot2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chestSlot2ActionPerformed(evt);
                        }
                });

                chestSlot3.setFont(new java.awt.Font("Monospaced", 0, 12));
                chestSlot3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                chestSlot3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                chestSlot3ActionPerformed(evt);
                        }
                });

                armSlot1.setFont(new java.awt.Font("Monospaced", 0, 12));
                armSlot1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                armSlot1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                armSlot1ActionPerformed(evt);
                        }
                });

                armSlot2.setFont(new java.awt.Font("Monospaced", 0, 12));
                armSlot2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                armSlot2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                armSlot2ActionPerformed(evt);
                        }
                });

                armSlot3.setFont(new java.awt.Font("Monospaced", 0, 12));
                armSlot3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                armSlot3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                armSlot3ActionPerformed(evt);
                        }
                });

                waistSlot1.setFont(new java.awt.Font("Monospaced", 0, 12));
                waistSlot1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                waistSlot1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                waistSlot1ActionPerformed(evt);
                        }
                });

                waistSlot2.setFont(new java.awt.Font("Monospaced", 0, 12));
                waistSlot2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                waistSlot2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                waistSlot2ActionPerformed(evt);
                        }
                });

                waistSlot3.setFont(new java.awt.Font("Monospaced", 0, 12));
                waistSlot3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                waistSlot3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                waistSlot3ActionPerformed(evt);
                        }
                });

                legSlot1.setFont(new java.awt.Font("Monospaced", 0, 12));
                legSlot1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                legSlot1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                legSlot1ActionPerformed(evt);
                        }
                });

                legSlot2.setFont(new java.awt.Font("Monospaced", 0, 12));
                legSlot2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                legSlot2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                legSlot2ActionPerformed(evt);
                        }
                });

                legSlot3.setFont(new java.awt.Font("Monospaced", 0, 12));
                legSlot3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                legSlot3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                legSlot3ActionPerformed(evt);
                        }
                });

                charmSlot1.setFont(new java.awt.Font("Monospaced", 0, 12));
                charmSlot1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                charmSlot1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                charmSlot1ActionPerformed(evt);
                        }
                });

                charmSlot2.setFont(new java.awt.Font("Monospaced", 0, 12));
                charmSlot2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                charmSlot2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                charmSlot2ActionPerformed(evt);
                        }
                });

                charmSlot3.setFont(new java.awt.Font("Monospaced", 0, 12));
                charmSlot3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                charmSlot3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                charmSlot3ActionPerformed(evt);
                        }
                });

                charmSkill1.setFont(new java.awt.Font("Monospaced", 0, 12));
                charmSkill1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                charmSkill1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                charmSkill1ActionPerformed(evt);
                        }
                });

                charmSkill2.setFont(new java.awt.Font("Monospaced", 0, 12));
                charmSkill2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
                charmSkill2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                charmSkill2ActionPerformed(evt);
                        }
                });

                skillPoint1.setFont(new java.awt.Font("Monospaced", 0, 12));
                skillPoint1.setLabelFor(charmSkill1);
                skillPoint1.setText("+10");

                skillPoint2.setFont(new java.awt.Font("Monospaced", 0, 12));
                skillPoint2.setLabelFor(charmSkill2);
                skillPoint2.setText("-10");

                javax.swing.GroupLayout setupLayout = new javax.swing.GroupLayout(setup);
                setup.setLayout(setupLayout);
                setupLayout.setHorizontalGroup(
                        setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(setupLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addComponent(weaponLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(setupLayout.createSequentialGroup()
                                                                .addComponent(charmSkillLabel)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(charmSkill1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(skillPoint1)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(charmSkill2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(skillPoint2))
                                                        .addGroup(setupLayout.createSequentialGroup()
                                                                .addComponent(weaponMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(weaponSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(weaponSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(6, 6, 6)
                                                                .addComponent(weaponSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addComponent(headLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(headMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(headSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(headSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(headSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addComponent(chestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chestMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chestSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chestSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(chestSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addComponent(armsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(armsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(armSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(armSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(armSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addComponent(waistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(waistMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(waistSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(waistSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(waistSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addComponent(legsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(legsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(legSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(legSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(legSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addComponent(charmLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(charmMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(charmSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(charmSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(charmSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(18, Short.MAX_VALUE))
                );
                setupLayout.setVerticalGroup(
                        setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(setupLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(setupLayout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(weaponLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(weaponMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(weaponSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(weaponSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(weaponSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(headMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(headSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(headSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(headSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(headLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chestMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(chestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(chestSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(chestSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(chestSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(armsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(armsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(armSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(armSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(armSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(waistMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(waistSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(waistSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(waistSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(waistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(legsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(legSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(legSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(legSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(legsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(charmMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(charmLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(charmSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(charmSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(charmSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(setupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(charmSkillLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(skillPoint1)
                                        .addComponent(skillPoint2)
                                        .addComponent(charmSkill1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(charmSkill2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(25, Short.MAX_VALUE))
                );

                output.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

                outputGroup.add(text);
                text.setFont(new java.awt.Font("Monospaced", 0, 12));
                text.setSelected(true);
                text.setText("TEXT");
                text.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                textActionPerformed(evt);
                        }
                });

                outputGroup.add(html);
                html.setFont(new java.awt.Font("Monospaced", 0, 12));
                html.setText("HTML");
                html.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                htmlActionPerformed(evt);
                        }
                });

                outputGroup.add(code);
                code.setFont(new java.awt.Font("Monospaced", 0, 12));
                code.setText("Code");
                code.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                codeActionPerformed(evt);
                        }
                });

                saveOutput.setFont(new java.awt.Font("Monospaced", 1, 12));
                saveOutput.setText("Save");
                saveOutput.setToolTipText("Append set to data file");
                saveOutput.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                saveOutputActionPerformed(evt);
                        }
                });

                jTextData.setFont(new java.awt.Font("Monospaced", 0, 12));
                jTextData.setText("MyData");
                jTextData.setToolTipText("Input your save data ");

                jLabel1.setFont(new java.awt.Font("Monospaced", 0, 12));
                jLabel1.setText("Data File");

                javax.swing.GroupLayout outputLayout = new javax.swing.GroupLayout(output);
                output.setLayout(outputLayout);
                outputLayout.setHorizontalGroup(
                        outputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(outputLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(text)
                                .addGap(18, 18, 18)
                                .addComponent(html)
                                .addGap(18, 18, 18)
                                .addComponent(code)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addGap(29, 29, 29)
                                .addComponent(jTextData, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                .addContainerGap())
                );
                outputLayout.setVerticalGroup(
                        outputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputLayout.createSequentialGroup()
                                .addGroup(outputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(text)
                                        .addComponent(html)
                                        .addComponent(code)
                                        .addComponent(saveOutput)
                                        .addComponent(jTextData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                .addGap(117, 117, 117))
                );

                jScrollPreview.setForeground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
                jScrollPreview.setFont(new java.awt.Font("Monospaced", 0, 12));
                jScrollPreview.setHorizontalScrollBar(null);

                jTextPreview.setColumns(20);
                jTextPreview.setEditable(false);
                jTextPreview.setFont(new java.awt.Font("Monospaced", 0, 12));
                jTextPreview.setForeground(new java.awt.Color(1, 1, 1));
                jTextPreview.setRows(5);
                jTextPreview.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));
                jTextPreview.setOpaque(false);
                jScrollPreview.setViewportView(jTextPreview);

                setNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Name"));

                jTextSetName.setFont(new java.awt.Font("Monospaced", 0, 12));
                jTextSetName.setText("Unnamed Set");
                jTextSetName.setToolTipText("Input set name, use enter to preview it now");
                jTextSetName.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jTextSetNameActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout setNamePanelLayout = new javax.swing.GroupLayout(setNamePanel);
                setNamePanel.setLayout(setNamePanelLayout);
                setNamePanelLayout.setHorizontalGroup(
                        setNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setNamePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextSetName, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                                .addContainerGap())
                );
                setNamePanelLayout.setVerticalGroup(
                        setNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(setNamePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextSetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                javax.swing.GroupLayout calculatorLayout = new javax.swing.GroupLayout(calculator);
                calculator.setLayout(calculatorLayout);
                calculatorLayout.setHorizontalGroup(
                        calculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(calculatorLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(calculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(output, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(calculatorLayout.createSequentialGroup()
                                                .addComponent(rank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(hunterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(setup, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                );
                calculatorLayout.setVerticalGroup(
                        calculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(calculatorLayout.createSequentialGroup()
                                .addGroup(calculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPreview, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, calculatorLayout.createSequentialGroup()
                                                .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(calculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(setNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(calculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(sex, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(hunterType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(rank, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                );

                jTabbedPane1.addTab("<html><body><table width=\"100\">&nbsp;Calculator</table></body></html>", new javax.swing.ImageIcon(getClass().getResource("/pic/calculator.png")), calculator, ""); // NOI18N

                jScrollPreview2.setFont(new java.awt.Font("Monospaced", 0, 12));
                jScrollPreview2.setHorizontalScrollBar(null);

                jTextPreview2.setColumns(20);
                jTextPreview2.setEditable(false);
                jTextPreview2.setFont(new java.awt.Font("Monospaced", 0, 12));
                jTextPreview2.setForeground(new java.awt.Color(1, 1, 1));
                jTextPreview2.setRows(5);
                jTextPreview2.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));
                jTextPreview2.setOpaque(false);
                jScrollPreview2.setViewportView(jTextPreview2);

                codeBook.setBorder(javax.swing.BorderFactory.createTitledBorder("Code Book"));

                codeBookName.setFont(new java.awt.Font("Monospaced", 0, 12));
                codeBookName.setText("MyData");

                codeBookLoad.setFont(new java.awt.Font("Monospaced", 1, 12));
                codeBookLoad.setText("Load");
                codeBookLoad.setToolTipText("Load code book");
                codeBookLoad.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                codeBookLoadActionPerformed(evt);
                        }
                });

                codeBookSave.setFont(new java.awt.Font("Monospaced", 1, 12));
                codeBookSave.setText("Save");
                codeBookSave.setToolTipText("Save code  book, overwrite the old file");
                codeBookSave.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                codeBookSaveActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout codeBookLayout = new javax.swing.GroupLayout(codeBook);
                codeBook.setLayout(codeBookLayout);
                codeBookLayout.setHorizontalGroup(
                        codeBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(codeBookLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(codeBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codeBookLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codeBookSave, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))
                );
                codeBookLayout.setVerticalGroup(
                        codeBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(codeBookLayout.createSequentialGroup()
                                .addGroup(codeBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(codeBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(codeBookLoad)
                                        .addComponent(codeBookSave))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                convert.setBorder(javax.swing.BorderFactory.createTitledBorder("Export Sets"));

                buttonGroup1.add(convertTEXT);
                convertTEXT.setFont(new java.awt.Font("Monospaced", 0, 12));
                convertTEXT.setSelected(true);
                convertTEXT.setText("TEXT");
                convertTEXT.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                convertTEXTActionPerformed(evt);
                        }
                });

                buttonGroup1.add(convertHTML);
                convertHTML.setFont(new java.awt.Font("Monospaced", 0, 12));
                convertHTML.setText("HTML");
                convertHTML.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                convertHTMLActionPerformed(evt);
                        }
                });

                Output.setFont(new java.awt.Font("Monospaced", 1, 12));
                Output.setText("Save & Export");
                Output.setToolTipText("Save code book, and output sets");
                Output.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                OutputActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout convertLayout = new javax.swing.GroupLayout(convert);
                convert.setLayout(convertLayout);
                convertLayout.setHorizontalGroup(
                        convertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(convertLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(convertTEXT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(convertHTML)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Output, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                .addContainerGap())
                );
                convertLayout.setVerticalGroup(
                        convertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(convertLayout.createSequentialGroup()
                                .addGroup(convertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(convertTEXT)
                                        .addComponent(convertHTML)
                                        .addComponent(Output))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                jScrollPane1.setFont(new java.awt.Font("Monospaced", 0, 12));

                codeList.setBorder(javax.swing.BorderFactory.createTitledBorder("Code List"));
                codeList.setFont(new java.awt.Font("Monospaced", 0, 12));
                codeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                codeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
                        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                                codeListValueChanged(evt);
                        }
                });
                jScrollPane1.setViewportView(codeList);

                loadSetInteract.setFont(new java.awt.Font("Monospaced", 1, 12));
                loadSetInteract.setText("Load to Calculator");
                loadSetInteract.setToolTipText("Load the selected set");
                loadSetInteract.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                loadSetInteractActionPerformed(evt);
                        }
                });

                getSetInteract.setFont(new java.awt.Font("Monospaced", 1, 12));
                getSetInteract.setText("Add from Calculator");
                getSetInteract.setToolTipText("Add the set below");
                getSetInteract.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                getSetInteractActionPerformed(evt);
                        }
                });

                deleteInteract.setFont(new java.awt.Font("Monospaced", 1, 12));
                deleteInteract.setText("Remove/Cut");
                deleteInteract.setToolTipText("Remvoe/cut the selected set (max 5) ");
                deleteInteract.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                deleteInteractActionPerformed(evt);
                        }
                });

                undoInteract.setFont(new java.awt.Font("Monospaced", 1, 12));
                undoInteract.setText("Paste");
                undoInteract.setToolTipText("Append the recently removed set (max 5)");
                undoInteract.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                undoInteractActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout viewerLayout = new javax.swing.GroupLayout(viewer);
                viewer.setLayout(viewerLayout);
                viewerLayout.setHorizontalGroup(
                        viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewerLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewerLayout.createSequentialGroup()
                                                .addComponent(codeBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(convert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(viewerLayout.createSequentialGroup()
                                                .addComponent(loadSetInteract, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(getSetInteract, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(deleteInteract, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undoInteract, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPreview2, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                );
                viewerLayout.setVerticalGroup(
                        viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(viewerLayout.createSequentialGroup()
                                .addGroup(viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, viewerLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addGroup(viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(convert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(codeBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(viewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(loadSetInteract)
                                                        .addComponent(getSetInteract)
                                                        .addComponent(deleteInteract)
                                                        .addComponent(undoInteract)))
                                        .addComponent(jScrollPreview2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                jTabbedPane1.addTab("<html><body><table width=\"100\">&nbsp;&nbsp;&nbsp;Viewer</table></body></html>", new javax.swing.ImageIcon(getClass().getResource("/pic/viewer.png")), viewer, ""); // NOI18N

                javax.swing.GroupLayout generatorLayout = new javax.swing.GroupLayout(generator);
                generator.setLayout(generatorLayout);
                generatorLayout.setHorizontalGroup(
                        generatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 1226, Short.MAX_VALUE)
                );
                generatorLayout.setVerticalGroup(
                        generatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 535, Short.MAX_VALUE)
                );

                jTabbedPane1.addTab("<html><body><table width=\"100\">&nbsp;&nbsp;Generator</table></body></html>", new javax.swing.ImageIcon(getClass().getResource("/pic/generator.png")), generator, ""); // NOI18N

                jScrollAbout.setBorder(javax.swing.BorderFactory.createTitledBorder("About"));

                jEditorAbout.setContentType("text/html");
                jEditorAbout.setEditable(false);
                jEditorAbout.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <h2 align = \"center\">\n      MHAG :\n    </h2>\n  <h2 align = \"center\">\n       Monster Hunter Armor Generator\n    </h2>\n <p align = \"center\">v1.0 Beta</p>\n <p align = \"center\">Release Date: 01/01/2011</p>\n<p align = \"center\">MHAG Project: <a href=\"http://code.google.com/p/mhag/\">code.google.com/p/mhag</a></p>\n<p align = \"center\">Proposed MHAG Set Database: <a href=\"http://mhag.wetpaint.com\">mhag.wetpaint.com</p>\n<p></p>\n<p align = \"center\">by Tifa@mh3</p>\n<p align = \"center\">Unity Member: <a href=\"http://www.capcom-unity.com/tifa@mh3\">www.capcom-unity.com/tifa@mh3</a></p>\n<p align = \"center\">Youtube Channel: <a href=\"http://www.youtube.com/mh3journey\">www.youtube.com/mh3journey</a></p>\n\n  </body>\n\n");
                jEditorAbout.setOpaque(false);
                jEditorAbout.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
                        public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                                jEditorAboutHyperlinkUpdate(evt);
                        }
                });
                jScrollAbout.setViewportView(jEditorAbout);

                jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/logo.png"))); // NOI18N

                jScrollUsage.setBorder(javax.swing.BorderFactory.createTitledBorder("Usage"));

                jTextUsage.setColumns(20);
                jTextUsage.setLineWrap(true);
                jTextUsage.setRows(5);
                jTextUsage.setText("There are three components: a calculator, a viewer and a generator.\n1. Calculator:\nOutput Panel: three output options (text/html/code)\n     TEXT :(.txt) plain text format, same as the outputs in preview panel.\n     HTML :(.html) tables in HTML format; it can be viewed in a browser.  MHAG HTML codes were tweaked in Google Chrome, and it also works nicely in Mozilla Firefox and Safari, but not Internet Explorer.\n     CODE :(.code) set code used to save set information for future use.\n     Data File: file name of save data.  If file name doesn't contain file type extension, MHAG automatically adds it.\n     Save Button: it APPENDs set to the save data.  If save file does not exist, a NEW file will be created.\n\nRank/Hunter Type/Gender Options:\n     Rank : low/high Rank; it resets all setup menus when rank option is swtiched.  The low rank option limits setup to low rank stuffs.\n     Hunter Type : blademaster/gunner; it resets all setup menus when hunter type option is swtiched.\n     Gender : male/female; it only affects the armor pieces that are only for male/female.  The corresponding armor name and its position in the menu wil be changed (not reset) when gender is switched.\n     Set Name : armor set name; \"Unnamed Set\" by default. It can be changed to any words (best less than 40 characters).  It is not immediately shown in the preview panel until ENTER key is pressed or other setup otions are selected afterward.\n\nSetup Panel: setup details\n     At beginning, only the first column of drop-down boxes are available.  They can be used to change the armor pieces/weapon slot/charm.  Each armor piece option has tool tip for skill names, skill points and number of slots.  Move mouse over the armor options (but not click on it) to show the tips.\n     When a armor piece, weapon slot or charm is selected, some additional boxes will appear on the right, depending on the number of jewel slots.  MHAG prevents users from gemming too many jewels.  When a charm is selected, users can also choose charm skills from the right skill classes.  If the charm allows two charm skills, MHAG prevents users from choosing two same skills.\n     To make it concise and save space, jewel menus only show the positive skill name and skill point.  But meanwhile, each jewel option also has tool tip for jewel names and number of slots.  Put mouse over a jewel option to show the tip.\n     All menu lists are sorted by alphatical order, so users can use keyboard to quickly locate the right stuffs.\n\nPreview Panel: preview the armor set, when changing armor setup.  Use the vertical scroll bar if the armor set involves a lot of armor skills.\n\n2. Viewer: \nCode Book Panel: \n     Load: load code book to Code List Panel.  It ONLY works for existing data file.  I didn't design a \"New Book\" button, because I don't want to encourage people to create a lot of  new code book .(If you really want to create one in MHAG, you can use output panel in the calcuatlor.)\n     Save: it saves all the items in the code list to code book.  Warning! Mhag overwrites all the old code data. MHAG prevents user from saving code book if the code list is empty.\n\nExport Sets Panel: This is the batch calculator.  It first saves the code book, then exports sets in text or html format.  It can be used to generate an easy-to-read set book, so users can print the sets or further convert it to PDF format.(print/PDF functions are not included)   The html codes are designed to print one set per page.\n\nCode List Panel: displays code list; Use mouse click or up/down key to nevigate sets from the (2nd) preview panel.\n\nLoad to Calculator Button: loads the selected set to the calculator, so they can be manually modified there.\n\nAdd from Calcutalor Button: appends the set after the selected set, and moves selection to the new set.  It does not delete any set.\n\nRemove/Cut Button: removes the selected set, and moves selection to the next set.  The last five removed sets can be retrieved later.\n\nPaste Button: appends the DELETED set after the selected set, and moves selection to the new set. It can only retrieve at most five deleted sets.\n\nTips:\n1). modify a set: select the set -> load to calculator -> modify it -> add from calcualtor -> select the old set (move up) -> remove \n2). swap two adjacent sets: select the upper set -> remove -> paste\n3). Set rearrangement : combine remove/paste options. Warning! only 5 sets can be stored.\n4). Don't FORGET to SAVE code book before exiting the program!\n\n3. Generator: (TBD)");
                jTextUsage.setWrapStyleWord(true);
                jTextUsage.setOpaque(false);
                jScrollUsage.setViewportView(jTextUsage);

                javax.swing.GroupLayout aboutLayout = new javax.swing.GroupLayout(about);
                about.setLayout(aboutLayout);
                aboutLayout.setHorizontalGroup(
                        aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(aboutLayout.createSequentialGroup()
                                .addGroup(aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(aboutLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollAbout, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(aboutLayout.createSequentialGroup()
                                                .addGap(171, 171, 171)
                                                .addComponent(jLabel2)))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollUsage, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
                                .addContainerGap())
                );
                aboutLayout.setVerticalGroup(
                        aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(aboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollUsage, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                                        .addGroup(aboutLayout.createSequentialGroup()
                                                .addComponent(jScrollAbout, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel2)))
                                .addContainerGap())
                );

                jTabbedPane1.addTab("<html><body><table width=\"100\">&nbsp;&nbsp;&nbsp;About</table></body></html>", new javax.swing.ImageIcon(getClass().getResource("/pic/help-browser.png")), about); // NOI18N

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1238, javax.swing.GroupLayout.PREFERRED_SIZE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void bladeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bladeActionPerformed
	    // set to blademaster
	    if(set.getBlade() == true )return;

	    set.setBlade(true);
	    initSetup(set.getLowRank(), set.getBlade(), set.getFemale());
    }//GEN-LAST:event_bladeActionPerformed

    private void highRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highRankActionPerformed
	    // set to high Rank
	    if(set.getLowRank() == false )return;

	    set.setLowRank(false);
	    initSetup(set.getLowRank(), set.getBlade(), set.getFemale());
    }//GEN-LAST:event_highRankActionPerformed

    private void lowRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowRankActionPerformed
	    // set to Low Rank
	    if(set.getLowRank() == true )return;

	    set.setLowRank(true);
	    initSetup(set.getLowRank(), set.getBlade(), set.getFemale());
    }//GEN-LAST:event_lowRankActionPerformed

    private void gunnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gunnerActionPerformed
	    // set to blademaster
	    if(set.getBlade() == false )return;

	    set.setBlade(false);
	    initSetup(set.getLowRank(), set.getBlade(), set.getFemale());
    }//GEN-LAST:event_gunnerActionPerformed

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
	    // set to male
	    if(set.getFemale() == false )return;

	    set.setFemale(false);
	    // TODO get & keep armorID

	    changeGender(set.getLowRank(), set.getBlade(), set.getFemale());
    }//GEN-LAST:event_maleActionPerformed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
	    // set to female
	    if(set.getFemale() == true )return;

	    set.setFemale(true);
	    // TODO get & keep armorID

	    changeGender(set.getLowRank(), set.getBlade(), set.getFemale());
    }//GEN-LAST:event_femaleActionPerformed

    private void headMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headMenuActionPerformed
	    armorMenuAction(0);
    }//GEN-LAST:event_headMenuActionPerformed

    private void chestMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chestMenuActionPerformed
	    armorMenuAction(1);
    }//GEN-LAST:event_chestMenuActionPerformed

    private void armsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armsMenuActionPerformed
	    armorMenuAction(2);
    }//GEN-LAST:event_armsMenuActionPerformed

    private void waistMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waistMenuActionPerformed
	    armorMenuAction(3);
    }//GEN-LAST:event_waistMenuActionPerformed

    private void legsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legsMenuActionPerformed
	    armorMenuAction(4);
    }//GEN-LAST:event_legsMenuActionPerformed

    private void weaponMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponMenuActionPerformed
	    weaponMenuAction();
    }//GEN-LAST:event_weaponMenuActionPerformed

    private void charmMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charmMenuActionPerformed
	    charmMenuAction();
    }//GEN-LAST:event_charmMenuActionPerformed

    private void charmSkill1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charmSkill1ActionPerformed
	    charmSkillAction(0);
    }//GEN-LAST:event_charmSkill1ActionPerformed

    private void charmSkill2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charmSkill2ActionPerformed
	    charmSkillAction(1);
    }//GEN-LAST:event_charmSkill2ActionPerformed

    private void weaponSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponSlot1ActionPerformed
	    jewelSlotAction(5, 0);
    }//GEN-LAST:event_weaponSlot1ActionPerformed

    private void weaponSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponSlot2ActionPerformed
	    jewelSlotAction(5, 1);
    }//GEN-LAST:event_weaponSlot2ActionPerformed

    private void weaponSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponSlot3ActionPerformed
	    jewelSlotAction(5, 2);
    }//GEN-LAST:event_weaponSlot3ActionPerformed

    private void headSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headSlot1ActionPerformed
	    jewelSlotAction(0, 0);
    }//GEN-LAST:event_headSlot1ActionPerformed

    private void headSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headSlot2ActionPerformed
	    jewelSlotAction(0, 1);
    }//GEN-LAST:event_headSlot2ActionPerformed

    private void headSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headSlot3ActionPerformed
	    jewelSlotAction(0, 2);
    }//GEN-LAST:event_headSlot3ActionPerformed

    private void chestSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chestSlot1ActionPerformed
	    jewelSlotAction(1, 0);
    }//GEN-LAST:event_chestSlot1ActionPerformed

    private void chestSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chestSlot2ActionPerformed
	    jewelSlotAction(1, 1);
    }//GEN-LAST:event_chestSlot2ActionPerformed

    private void chestSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chestSlot3ActionPerformed
	    jewelSlotAction(1, 2);
    }//GEN-LAST:event_chestSlot3ActionPerformed

    private void armSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armSlot1ActionPerformed
	    jewelSlotAction(2, 0);
    }//GEN-LAST:event_armSlot1ActionPerformed

    private void armSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armSlot2ActionPerformed
	    jewelSlotAction(2, 1);
    }//GEN-LAST:event_armSlot2ActionPerformed

    private void armSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armSlot3ActionPerformed
	    jewelSlotAction(2, 2);
    }//GEN-LAST:event_armSlot3ActionPerformed

    private void waistSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waistSlot1ActionPerformed
	    jewelSlotAction(3, 0);
    }//GEN-LAST:event_waistSlot1ActionPerformed

    private void waistSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waistSlot2ActionPerformed
	    jewelSlotAction(3, 1);
    }//GEN-LAST:event_waistSlot2ActionPerformed

    private void waistSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waistSlot3ActionPerformed
	    jewelSlotAction(3, 2);
    }//GEN-LAST:event_waistSlot3ActionPerformed

    private void legSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legSlot1ActionPerformed
	    jewelSlotAction(4, 0);
    }//GEN-LAST:event_legSlot1ActionPerformed

    private void legSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legSlot2ActionPerformed
	    jewelSlotAction(4, 1);
    }//GEN-LAST:event_legSlot2ActionPerformed

    private void legSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legSlot3ActionPerformed
	    jewelSlotAction(4, 2);
    }//GEN-LAST:event_legSlot3ActionPerformed

    private void charmSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charmSlot1ActionPerformed
	    jewelSlotAction(6, 0);
    }//GEN-LAST:event_charmSlot1ActionPerformed

    private void charmSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charmSlot2ActionPerformed
	    jewelSlotAction(6, 1);
    }//GEN-LAST:event_charmSlot2ActionPerformed

    private void charmSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charmSlot3ActionPerformed
	    jewelSlotAction(6, 2);
    }//GEN-LAST:event_charmSlot3ActionPerformed

    private void textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textActionPerformed
	    saveOpt = 0;
    }//GEN-LAST:event_textActionPerformed

    private void htmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlActionPerformed
	    saveOpt = 1;
    }//GEN-LAST:event_htmlActionPerformed

    private void codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeActionPerformed
	    saveOpt = 2;
}//GEN-LAST:event_codeActionPerformed

    private void saveOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOutputActionPerformed
	    try {
		    appendData();
	    } catch (FileNotFoundException ex) {
		    Logger.getLogger(MhagGui.class.getName()).log(Level.SEVERE, null, ex);
	    }
}//GEN-LAST:event_saveOutputActionPerformed

    private void codeBookLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeBookLoadActionPerformed

	    String codeFile = codeBookName.getText();
	    if(!codeFile.endsWith(".code"))
		    codeFile = codeFile+".code";

	    Scanner codeIn;

		try {
			codeIn = new Scanner(new File(codeFile));
		} catch (FileNotFoundException ex) {
			String message = String.format("Code File %s doesnot exist!\n",codeFile);
			jTextPreview2.append(message);
			message = String.format("create a new Code Book %s, or choose another Code File\n",codeFile);
			jTextPreview2.append(message);
			return;
		}

	    listModel.clear();
	    while(codeIn.hasNext())
	    {
		    String codeLine = codeIn.nextLine();
		    listModel.addElement(codeLine);
	    }

	    adjust = true;
	    codeList.setModel(listModel);
	    codeList.clearSelection();
	    adjust = false;

	    codeIn.close();
	    codeBookInUse = true;
    }//GEN-LAST:event_codeBookLoadActionPerformed

    private void codeBookSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeBookSaveActionPerformed
		try {
			codeBookSave();
		} catch (FileNotFoundException ex) {
			Logger.getLogger(MhagGui.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_codeBookSaveActionPerformed

    private void codeBookSave() throws FileNotFoundException
    {
	    //ListModel listModel =  codeList.getModel();
	    int num = listModel.getSize();
	    if(num == 0)
	    {
		    jTextPreview2.setText("Don't have any code! Why save it?!\n");
		    return;
	    }

	    String codeFile = codeBookName.getText();
	    PrintStream codeOut;
	    if(!codeFile.endsWith(".code"))
		    codeFile = codeFile+".code";

	    codeOut = new PrintStream(codeFile);

	    for(int i = 0; i < num; i++)
	    {
		    String codeLine = (String) listModel.getElementAt(i);
		    codeOut.println(codeLine);
	    }

    }

    private void convertTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertTEXTActionPerformed
	    saveOpt = 0;
    }//GEN-LAST:event_convertTEXTActionPerformed

    private void convertHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertHTMLActionPerformed
	    saveOpt = 1;
    }//GEN-LAST:event_convertHTMLActionPerformed

    private void OutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputActionPerformed

		try {
			codeBookSave();
		} catch (FileNotFoundException ex) {
			Logger.getLogger(MhagGui.class.getName()).log(Level.SEVERE, null, ex);
		}

	    String codeFile = codeBookName.getText();
	    String saveFile = "";
	    PrintStream codeOut;
	    if(!codeFile.endsWith(".code"))
	    {
		    if(saveOpt == 0)
			    saveFile = codeFile+".txt";
		    else
			    saveFile = codeFile+".html";

		    codeFile = codeFile+".code";
	    }
	    else
	    {
		    int pos = codeFile.indexOf(".code");
		    String codePart = codeFile.substring(0,pos);
		    if(saveOpt == 0)
			    saveFile = codePart+".txt";
		    else
			    saveFile = codePart+".html";
	    }

	    mhag.setFileIn(codeFile);
	    mhag.setFileOut(saveFile);
	    mhag.setOutFormat(saveOpt);

		try {
			mhagData.batchCalc(mhag);  //use batch calculator module
		} catch (FileNotFoundException ex) {
			Logger.getLogger(MhagGui.class.getName()).log(Level.SEVERE, null, ex);
		}
	    mhag.setOutFormat(0); //back to text format

    }//GEN-LAST:event_OutputActionPerformed

    private void codeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_codeListValueChanged
	    if(!evt.getValueIsAdjusting()) //solve the problem of running twice !
		    codePreview();
    }//GEN-LAST:event_codeListValueChanged

    private void loadSetInteractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSetInteractActionPerformed
	    if(!codeBookInUse)return;
	    String setCode = (String) codeList.getSelectedValue();
	    loadSet2Calc(setCode);
    }//GEN-LAST:event_loadSetInteractActionPerformed

    private void getSetInteractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSetInteractActionPerformed
	    //read set name, in case users input it , but foget to 'set' it 
	    //by 'enter' key and not adjusting with other options
	    String setName = jTextSetName.getText();
	    set.setSetName(setName);

	    String codeLine = set.getSetCode();
	    int ind = codeList.getSelectedIndex();
	    listModel.insertElementAt(codeLine, ind+1);
	    codeList.setSelectedIndex(ind+1);
    }//GEN-LAST:event_getSetInteractActionPerformed

    private void deleteInteractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInteractActionPerformed
	    int ind = codeList.getSelectedIndex();

	    //save deleted code;
	    String codeLine = (String) codeList.getSelectedValue();
	    for(int i = 4; i > 0; i--)
		    deletedCodes[i] = deletedCodes[i-1];
	    deletedCodes[0] = codeLine;

	    //remove code element
	    listModel.removeElementAt(ind);

	    //move index
	    int indNext;
	    if(listModel.size() == ind)
		    indNext = ind - 1;
	    else
		    indNext = ind;
	    codeList.setSelectedIndex(indNext);

    }//GEN-LAST:event_deleteInteractActionPerformed

    private void jTextSetNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSetNameActionPerformed
	    String setName = jTextSetName.getText();
	    set.setSetName(setName);
	    calSetGUI();
    }//GEN-LAST:event_jTextSetNameActionPerformed

    private void undoInteractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoInteractActionPerformed
	    //append deleted code
	    String codeLine = deletedCodes[0];
	    if(codeLine.equals(""))return; // Don't append empty code

	    int ind = codeList.getSelectedIndex();
	    listModel.insertElementAt(codeLine, ind+1);
	    codeList.setSelectedIndex(ind+1);

	    //remove the code from the list ofdeleted codes
	    for(int i = 0; i < 4; i++)
		    deletedCodes[i] = deletedCodes[i+1];
	    deletedCodes[4] = "";

	    /*for(int i = 0; i < 5; i++)
		    System.out.println("here:"+deletedCodes[i]);
	    System.out.println("========================");
	     */

    }//GEN-LAST:event_undoInteractActionPerformed

    private void jEditorAboutHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jEditorAboutHyperlinkUpdate
		try {
			launchBrowser(evt);
		} catch (URISyntaxException ex) {
			Logger.getLogger(MhagGui.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(MhagGui.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_jEditorAboutHyperlinkUpdate

    private void launchBrowser(HyperlinkEvent evt) throws URISyntaxException, IOException
    {
	    HyperlinkEvent.EventType type = evt.getEventType();
	    if (type == HyperlinkEvent.EventType.ACTIVATED)
	    {
		    StringTokenizer st = new StringTokenizer(evt.getDescription());
		    if(st.hasMoreTokens())
		    {
			    String urlString = st.nextToken();
			    if(Desktop.isDesktopSupported())
			    {
				    URI uri = new URI(urlString);
				    Desktop.getDesktop().browse(uri);
			    }
		    }
	    }

    }

    private void codePreview()
    {
	    if(adjust) return; //when loading code book
	    if(codeList.getSelectedIndex() < 0) return; //not initiate;

	    streamView.reset();

	    String setCode = (String) codeList.getSelectedValue();

	    Set aSet = new Set();

	    boolean pass = true;
	    pass = aSet.setSetFromCode(mhag, setCode); //read set

	    if(pass)
		    pass = aSet.checkSet(mhag, mhagData);  //check set
	    if(!pass)
	    {
		    jTextPreview2.setText("Error in set code!\n");
		    return;
	    }
	    aSet.calcSet(mhag, mhagData);   //calculate set

	    mhag.setOutFormat(0);
	    aSet.save(mhag, mhagData, streamView);  // save results
	    streamView.rewind();

    }


    private void loadSet2Calc(String setCode)
    {
	    Set aSet = new Set();

	    boolean pass = true;
	    pass = aSet.setSetFromCode(mhag, setCode); //read set

	    if(pass)
		    pass = aSet.checkSet(mhag, mhagData);  //check set

	    if(!pass)
	    {
		    jTextPreview2.append("Forbid loading wrong code to calculator!\n");
		    return;
	    }

	    initGUISet();


	    // start load
	    jTextSetName.setText(aSet.getSetName());

	    if(aSet.getLowRank())
	    {
		    lowRank.setSelected(true);
		    highRank.setSelected(false);
	    }
	    else
	    {
		    lowRank.setSelected(false);
		    highRank.setSelected(true);
	    }

	    if(aSet.getBlade())
	    {
		    blade.setSelected(true);
		    gunner.setSelected(false);
	    }
	    else
	    {
		    blade.setSelected(false);
		    gunner.setSelected(true);
	    }

	    male.setSelected(true);
	    female.setSelected(false);

	    set.setBlade(aSet.getBlade());
	    set.setLowRank(aSet.getLowRank());
	    set.setFemale(aSet.getLowRank());

	    initSetup(aSet.getLowRank(), aSet.getBlade(), false);

	    //weapon menu
	    int nJewel = aSet.getNumJewel(5);
	    int nSlot = 0;
	    for(int i = 0; i < nJewel; i++)
		    nSlot += mhagData.getJewel(aSet.getJewelID()[5][i]).getNumSlot();

	    weaponMenu.setSelectedIndex(nSlot);
	    weaponMenuAction();

	    //body menu
	    for (int i = 0; i < 5; i++)
	    {
		    int armorID = aSet.getArmorID()[i];
		    JComboBox bodyMenu = getArmorMenuObj(i);
		    int[] list = mhagData.getArmorList(aSet.getLowRank(),
			   aSet.getBlade(), false, i);
		    for (int j = 0; j < list.length; j++)
		    {
			    if(list[j] == armorID)
			    {
				    bodyMenu.setSelectedIndex(j);
				    armorMenuAction(i);
				    break;
			    }
		    }
	    }

	    //charm menu
	    int[] list2 = mhagData.getCharmList(aSet.getLowRank());

	    for (int j = 0; j < list2.length; j++)
	    {
		    if(list2[j] == aSet.getCharmID())
		    {
			    charmMenu.setSelectedIndex(j);
			    charmMenuAction();
			    break;
		    }
	    }

	    //jewel menu
	    for(int i = 0; i< 7; i++)
	    {
		    for(int j = 0; j < aSet.getNumJewel(i); j++)
		    {
			    int jewelID = aSet.getJewelID()[i][j];
			    JComboBox jewelSlot = getJewelSlotObj(i,j);

			    int[] list = mhagData.getJewelList(aSet.getLowRank(),
				    jewelMenuType[i][j]);
			    for (int k = 0; k < list.length; k++)
			    {
				    if(list[k] == jewelID)
				    {
					    jewelSlot.setSelectedIndex(k);
					    jewelSlotAction(i,j);
					    break;
				    }
			    }

		    }
	    }

	    //jewel skill
	    int nSkill = aSet.getNumCharmSkill();
	    if(nSkill == 1)
	    {
		    Charm charm = mhagData.getCharm(aSet.getCharmID());
		    list2 = mhagData.getSkillList(charm.getSkillClass()[0],
			   set.getCharmSkillID()[1]);

		    for (int j = 0; j < list2.length; j++)
		    {
			    if(list2[j] == aSet.getCharmSkillID()[0])
			    {
				    charmSkill1.setSelectedIndex(j);
				    charmSkillAction(0);
				    break;
			    }
		    }
	    }
	    else if(nSkill == 2)
	    {
		    Charm charm = mhagData.getCharm(aSet.getCharmID());
		    //check the 1st skill, if not available, move 2nd skill

		    list2 = mhagData.getSkillList(charm.getSkillClass()[0],
			   set.getCharmSkillID()[1]);

		    boolean found = false;
		    for (int j = 0; j < list2.length; j++)
		    {
			    if(list2[j] == aSet.getCharmSkillID()[0])
			    {
				    charmSkill1.setSelectedIndex(j);
				    charmSkillAction(0);
				    found = true;
				    break;
			    }
		    }

		    if(!found)
		    {
			    int ind = charmSkill2.getSelectedIndex();
			    charmSkill2.setSelectedIndex(ind + 1);
			    charmSkillAction(1);

			    //redo 1st skill

			    list2 = mhagData.getSkillList(charm.getSkillClass()[0],
				   aSet.getCharmSkillID()[1]);
			    for (int j = 0; j < list2.length; j++)
			    {
				    if(list2[j] == aSet.getCharmSkillID()[0])
				    {
					    charmSkill1.setSelectedIndex(j);
					    charmSkillAction(0);
					    break;
				    }
			    }
		    }

		    //check 2st skill

		    list2 = mhagData.getSkillList(charm.getSkillClass()[1],
			   aSet.getCharmSkillID()[0]);
		    for (int j = 0; j < list2.length; j++)
		    {
			    if(list2[j] == aSet.getCharmSkillID()[1])
			    {
				    charmSkill2.setSelectedIndex(j);
				    charmSkillAction(1);
				    break;
			    }
		    }

	    }


    }

    private void appendData() throws FileNotFoundException
    {
	    calSetGUI();
	    PrintStream saveStream;
	    String saveData = jTextData.getText();
	    if(saveOpt == 0) //text file
	    {
		    if(!saveData.endsWith(".txt"))
			    saveData = saveData + ".txt";
		    saveStream = MhagUtil.streamAppendFile(saveData);
		    mhag.setOutFormat(0);
		    set.save(mhag, mhagData, saveStream);  // save results

	    }
	    else if (saveOpt == 1)
	    {
		    if(!saveData.endsWith(".html"))
			    saveData = saveData + ".html";
		    saveStream = MhagUtil.streamAppendFile(saveData);
		    mhag.setOutFormat(1);

		    saveStream.printf("<p style=\"page-break-before:always\">" +
				"Set :</p>\n");
		    set.save(mhag, mhagData, saveStream);  // save results

		    mhag.setOutFormat(0);

	    }
	    else
	    {
		    if(!saveData.endsWith(".code"))
			    saveData = saveData + ".code";
		    saveStream = MhagUtil.streamAppendFile(saveData);
		    String codeLine = set.getSetCode();   //get set code
		    saveStream.println(codeLine);
	    }
	    saveStream.close();

    }

    private void weaponMenuAction()
    {
	   int ind = weaponMenu.getSelectedIndex();
	   int bodyPart = 5;

	   if(ind <= 0 )
	   {
		   set.setInUse(bodyPart, false);
		   set.setNumJewel(bodyPart, 0);  //initiate jewel
		   Arrays.fill(jewelInd[bodyPart], 0);  // inititate jewelInd
		   Arrays.fill(jewelMenuType[bodyPart], 0);  // inititate menu type
		   for (int i = 0; i < 3; i++)
		   {
			   changeJewelSlot(bodyPart, i, set.getLowRank(), 0, false);
		   }
		   calSetGUI();
	   }
	   else
	   {
		   set.setInUse(bodyPart, true);

		   // get number of slots
		   int nSlot = ind;
		   //initialiate jewel menu lists
		   set.setNumJewel(bodyPart, nSlot);
		   Arrays.fill(jewelInd[bodyPart], 0);  // inititate jewelInd
		   for (int i = 0; i < nSlot; i++)  //start from 1
		   {
			   changeJewelSlot(bodyPart, i, set.getLowRank(), nSlot, true);
		   }
		   for (int i = nSlot; i < 3; i++)
		   {
			   changeJewelSlot(bodyPart, i, set.getLowRank(), 0, false);
		   }

	   }

    }

    private void armorMenuAction(int bodyPart)
    {
	    if(adjust)return;  //for male/female change

	   JComboBox bodyMenu = getArmorMenuObj(bodyPart);

	   int ind = bodyMenu.getSelectedIndex();

	   if(ind <= 0 )
	   {
		   set.setInUse(bodyPart, false);
		   set.setNumJewel(bodyPart, 0);  //initiate jewel
		   Arrays.fill(jewelInd[bodyPart], 0);  // inititate jewelInd
		   Arrays.fill(jewelMenuType[bodyPart], 0);  // inititate menu type
		   for (int i = 0; i < 3; i++)  //start from 1
			   changeJewelSlot(bodyPart, i, set.getLowRank(), 0, false);
		   calSetGUI();
	   }
	   else
	   {
		   // obtain list value
		   int[] list = mhagData.getArmorList(set.getLowRank(),
			   set.getBlade(), set.getFemale(), bodyPart);
		   int armorID = list[ind];
		   if(armorID == set.getArmorID()[bodyPart])return; //no change, no reset

		   // set armor id
		   set.setInUse(bodyPart, true);
		   set.setArmorID(bodyPart, armorID);

		   // get number of slots
		   Armor armor = mhagData.getArmor(bodyPart, armorID);
		   int nSlot = armor.getNumSlot();
		   //initialiate jewel menu lists
		   set.setNumJewel(bodyPart, nSlot);
		   Arrays.fill(jewelInd[bodyPart], 0);  // inititate jewelInd
		   for (int i = 0; i < nSlot; i++)  //start from 1
		   {
			   changeJewelSlot(bodyPart, i, set.getLowRank(), nSlot, true);
		   }
		   for (int i = nSlot; i < 3; i++)
		   {
			   changeJewelSlot(bodyPart, i, set.getLowRank(), 0, false);
		   }

		   if(nSlot == 0)calSetGUI();
	   }
    }

    private void charmMenuAction()
    {
	   int ind = charmMenu.getSelectedIndex();
	   int bodyPart = 6;

	   if(ind <= 0 )
	   {
		   set.setInUse(bodyPart, false);
		   set.setNumJewel(bodyPart, 0);  //initiate jewel
		   Arrays.fill(jewelInd[bodyPart], 0);  // inititate jewelInd
		   Arrays.fill(jewelMenuType[bodyPart], 0);  // inititate menu type
		   for (int i = 0; i < 3; i++)   //change charm jewel
			   changeJewelSlot(bodyPart, i, set.getLowRank(), 0, false);
		   for (int i = 0; i < 2; i++)  //change charm skill
			   changeCharmSkill(i, "D", false);
		   charmSkillLabel.setVisible(false);
		   skillPoint1.setText("");
		   skillPoint2.setText("");
		   set.setCharmID(-1);
		   set.setNumCharmSkill(0);
		   set.setCharmSkillID(0, -1);
		   set.setCharmSkillID(1, -1);
	   }
	   else
	   {
		   //obtain list value
		   int[] list = mhagData.getCharmList(set.getLowRank());
		   int charmID = list[ind];
		   if(set.getCharmID() == charmID)return; // no change

		   // set Jewel id
		   set.setInUse(bodyPart, true);
		   set.setCharmID(charmID);

		   // get number of slots
		   Charm charm = mhagData.getCharm(charmID);
		   int nSlot = charm.getNumSlot();
		   //initialiate jewel menu lists
		   set.setNumJewel(bodyPart, nSlot);
		   Arrays.fill(jewelInd[bodyPart], 0);  // inititate jewelInd
		   for (int i = 0; i < 3; i++) //start from 1
		   {
			   if(i < nSlot)
			   {
				   changeJewelSlot(bodyPart, i, set.getLowRank(), nSlot, true);
			   }
			   else
			   {
				   changeJewelSlot(bodyPart, i, set.getLowRank(), 0, false);
			   }
		   }
		   //change charmSkill

		   int nSkill = charm.getNumSkill();
		   set.setNumCharmSkill(nSkill);

		   if(nSkill == 1)
		   {
			   charmSkillLabel.setVisible(true);
			   String skillClass = charm.getSkillClass()[0];
			   changeCharmSkill(0, skillClass, true);
			   skillPoint1.setText(String.format(
				   "%+d",charm.getSkillPoint()[0]));
			   changeCharmSkill(1, "D", false);
			   skillPoint2.setText("");
			   set.setCharmSkillID(1, -1);

		   }
		   else if(nSkill == 2)
		   {
			   charmSkillLabel.setVisible(true);
			   String skillClass = charm.getSkillClass()[0];
			   changeCharmSkill(0, skillClass, true);
			   skillPoint1.setText(String.format(
				   "%+d",charm.getSkillPoint()[0]));
			   skillClass = charm.getSkillClass()[1];
			   changeCharmSkill(1, skillClass, true);
			   skillPoint2.setText(String.format(
				   "%+d",charm.getSkillPoint()[1]));
		   }
		   else
		   {
			   charmSkillLabel.setVisible(false);
			   changeCharmSkill(0, "D", false);
			   skillPoint1.setText("");
			   changeCharmSkill(1, "D", false);
			   skillPoint2.setText("");
			   set.setCharmSkillID(0, -1);
			   set.setCharmSkillID(1, -1);
		   }

	   }
	   calSetGUI();
    }

    private void charmSkillAction(int slotInd)
    {
	    if(adjust)return;
	    if(slotInd == 0)
	    {
		   //charm skill 1
		   int ind = charmSkill1.getSelectedIndex();
		   if(ind < 0) return;

		   Charm charm = mhagData.getCharm(set.getCharmID());
		   int[] list = mhagData.getSkillList(charm.getSkillClass()[0],
			   set.getCharmSkillID()[1]);

		   set.setCharmSkillID(0,list[ind]);

		   if(set.getNumCharmSkill() == 2)
		   {
			   adjust = true;
			   Charm charm2 =  mhagData.getCharm(set.getCharmID());
			   changeCharmSkill(1, charm2.getSkillClass()[1], true);
			   adjust = false;
		   }
	    }
	    else
	    {
		    //charm skill 2
		   int ind = charmSkill2.getSelectedIndex();
		   if(ind < 0) return;

		   Charm charm = mhagData.getCharm(set.getCharmID());
		   int[] list = mhagData.getSkillList(charm.getSkillClass()[1],
			   set.getCharmSkillID()[0]);

		   set.setCharmSkillID(1,list[ind]);

		   if(set.getNumCharmSkill() == 2)
		   {
			   adjust = true;
			   Charm charm2 =  mhagData.getCharm(set.getCharmID());
			   changeCharmSkill(0, charm2.getSkillClass()[0], true);
			   adjust = false;
		   }
	    }
	    calSetGUI();
    }

    private void jewelSlotAction(int bodyPart, int slotInd)
    {
	   if(adjust)return;  //don't perform action, when adjust combo box list;

	   JComboBox jewelSlot = getJewelSlotObj(bodyPart, slotInd);

	   int ind = jewelSlot.getSelectedIndex();
	   if(ind < 0) return; //initial menu

	   jewelInd[bodyPart][slotInd] = ind;

	   // change the other 2 comboBox

	   adjust = true;
	   int nSlot;
	   if(bodyPart < 5) // armor piece
	   {
		   Armor armor = mhagData.getArmor(bodyPart, set.getArmorID()[bodyPart]);
		   nSlot = armor.getNumSlot();  //armor slot
	   }
	   else if(bodyPart == 5) //weapon
	   {
		   nSlot = weaponMenu.getSelectedIndex();
	   }
	   else // charm
	   {
		   Charm charm = mhagData.getCharm(set.getCharmID());
		   nSlot = charm.getNumSlot();
	   }

	   //special case [2/1/0]
  	   boolean match = check200(bodyPart, nSlot);

//	   boolean match = false;
	   if(!match)
	   {
		   for (int i = 0; i < nSlot; i++)
		   {
			   if(i == slotInd)continue;
			   int nRest = nSlot - restSlots(bodyPart, i);

			   if(nRest <= 0)
			   {
				   changeJewelSlot(bodyPart, i, set.getLowRank(), 0, false);
			   }
			   else
			   {
				   changeJewelSlot(bodyPart, i, set.getLowRank(), nRest, true);
			   }

		   }
	    }
//	   getJewel(bodyPart);

	   setJewelGUI(bodyPart);
	   calSetGUI();
//	   System.out.printf(">> %s %s %s\n",jewelMenuType[bodyPart][0],jewelMenuType[bodyPart][1],jewelMenuType[bodyPart][2]);
//	   System.out.printf("> %s %s %s\n",jewelInd[bodyPart][0],jewelInd[bodyPart][1],jewelInd[bodyPart][2]);

	   adjust = false;

    }

    // get Jewel ID according to jewel buttton position
    private void getJewelID(int bodyPart)
    {
	    int[] jewelID = new int[3];
	    Arrays.fill(jewelID,-1);
	    for (int i = 0; i < 3; i++)
	    {
		    int ind = jewelInd[bodyPart][i];
		    if(ind <= 0)continue;
		    int[] list = mhagData.getJewelList(set.getLowRank(), jewelMenuType[bodyPart][i]);
		    jewelID[i] = list[ind];
	    }
    }

    // [2/0/0] slot menu case, only show 2/1
    private boolean check200(int bodyPart, int Slot)
    {
	    if(Slot != 3) return false;

	    boolean if2Slot = false;
	    int[] indLeft = new int[3];
	    Arrays.fill(indLeft, -1);
	    int ind2nd = -1;

	    int j = 0;
	    for (int i = 0; i < 3; i++)
	    {
		    int[] list = mhagData.getJewelList(set.getLowRank(), jewelMenuType[bodyPart][i]);
		    int ind = jewelInd[bodyPart][i];
		    if(ind <= 0)
		    {
			    indLeft[j++] = i;
			    continue;
		    }
		    int nSlot = mhagData.getJewel(list[ind]).getNumSlot();
		    if(nSlot == 2)
		    {
			    if2Slot = true;
			    ind2nd = i;
		    }
		    else
			    return false;
	    }
	    if(if2Slot )  // 2 & 0 & (0)
	    {
		    changeJewelSlot(bodyPart, ind2nd, set.getLowRank(), 3, true);
		    changeJewelSlot(bodyPart, indLeft[0], set.getLowRank(), 1, true);
		    changeJewelSlot(bodyPart, indLeft[1], set.getLowRank(), 0, false);
		    return true;
	    }
	    else
		    return false;
    }

    private int restSlots(int bodyPart, int slotInd)
    {
	    int num = 0;
	    for(int i = 0; i < 3; i++)
	    {
		    if(slotInd == i)continue;
		    int ind = jewelInd[bodyPart][i];
		    if(ind <= 0)continue;
		    int[] list = mhagData.getJewelList(set.getLowRank(), jewelMenuType[bodyPart][i]);
		    int jewelID = list[ind];
		    num += mhagData.getJewel(jewelID).getNumSlot();
	    }
	    return num;
    }

    private void setJewelGUI(int bodyPart)
    {

	   int nJewel = 0;
	   for(int i = 0; i < 3; i++)
	   {
		   int ind = jewelInd[bodyPart][i];
		   if(ind <=0 ) continue;
		   int[] list = mhagData.getJewelList(set.getLowRank(), jewelMenuType[bodyPart][i]);
		   set.setJewelID(bodyPart, nJewel, list[ind]);
		   nJewel++;
	   }
	   set.setNumJewel(bodyPart, nJewel);
    }


    private void initMhag() throws FileNotFoundException
    {
	mhag.setMethod(0);  // default method: calculator
	//mhag.setLogOpt(0);  // log in console screen
	mhag.setLogOpt(2);  // turn off log
	mhag.prepareLogFile();

	mhag.showMhagInfo(); //display MHAG welcome info
	mhagData.readFile(mhag); //read file
	mhagData.dataPreProc();  //pre process

	Arrays.fill(deletedCodes, ""); //initiate deleted codes

	initGUISet();

    }

    private void initGUISet()
    {
	set.init();
	for (int i = 0; i < 7; i++)
	{
		Arrays.fill(jewelInd[i],0);   // init jewel IDs as null
		Arrays.fill(jewelMenuType[i],0);   // init jewel IDs as null
	}

	//initialize renderer
	for(int i = 0; i < 7; i++)
	{
		for(int j = 0; j < 3; j++)
		{
			renderer[i][j] = new ComboboxToolTipRenderer();
		        JComboBox jewelSlot = getJewelSlotObj(i, j);
			jewelSlot.setRenderer(renderer[i][j]);
		}
	}

	for(int i = 0; i < 5; i++)
	{
		rendererArmor[i] = new ComboboxToolTipRenderer();
		JComboBox bodyMenu = getArmorMenuObj(i);
		bodyMenu.setRenderer(rendererArmor[i]);
	}

    }

    /**
    * @param args the command line arguments
    */

    public JComboBox getArmorMenuObj(int bodyPart)
    {
	    JComboBox bodyMenu;
	    if(bodyPart == 0)
		    bodyMenu = headMenu;
	    else if(bodyPart == 1)
		    bodyMenu = chestMenu;
	    else if(bodyPart == 2)
		    bodyMenu = armsMenu;
	    else if(bodyPart == 3)
		    bodyMenu = waistMenu;
	    else
		    bodyMenu = legsMenu;

	    return bodyMenu;
    }

    public JComboBox getJewelSlotObj(int bodyPart, int slotInd)
    {
	    JComboBox jewelSlot;
	    if(bodyPart == 0)
	    {
		    if(slotInd == 0)
		    {
			    jewelSlot = headSlot1;
		    }
		    else if(slotInd == 1)
		    {
			    jewelSlot = headSlot2;
		    }
		    else
		    {
			    jewelSlot = headSlot3;
		    }
	    }
	    else if(bodyPart == 1)
	    {
		    if(slotInd == 0)
		    {
			    jewelSlot = chestSlot1;
		    }
		    else if(slotInd == 1)
		    {
			    jewelSlot = chestSlot2;
		    }
		    else
		    {
			    jewelSlot = chestSlot3;
		    }
	    }
	    else if(bodyPart == 2)
	    {
		    if(slotInd == 0)
		    {
			    jewelSlot = armSlot1;
		    }
		    else if(slotInd == 1)
		    {
			    jewelSlot = armSlot2;
		    }
		    else
		    {
			    jewelSlot = armSlot3;
		    }
	    }
	    else if(bodyPart == 3)
	    {
		    if(slotInd == 0)
		    {
			    jewelSlot = waistSlot1;
		    }
		    else if(slotInd == 1)
		    {
			    jewelSlot = waistSlot2;
		    }
		    else
		    {
			    jewelSlot = waistSlot3;
		    }
	    }
	    else if(bodyPart == 4)
	    {
		    if(slotInd == 0)
		    {
			    jewelSlot = legSlot1;
		    }
		    else if(slotInd == 1)
		    {
			    jewelSlot = legSlot2;
		    }
		    else
		    {
			    jewelSlot = legSlot3;
		    }
	    }
	    else if(bodyPart == 5)  //weapon
	    {
		    if(slotInd == 0)
		    {
			    jewelSlot = weaponSlot1;
		    }
		    else if(slotInd == 1)
		    {
			    jewelSlot = weaponSlot2;
		    }
		    else
		    {
			    jewelSlot = weaponSlot3;
		    }
	    }
	    else //charm slots
	    {
		    if(slotInd == 0)
		    {
			    jewelSlot = charmSlot1;
		    }
		    else if(slotInd == 1)
		    {
			    jewelSlot = charmSlot2;
		    }
		    else
		    {
			    jewelSlot = charmSlot3;
		    }
	    }
	    return jewelSlot;

    }

    public void changeArmorMenu(int bodyPart,boolean lowRank, boolean blade,
	    boolean female, boolean active)
    {
	    JComboBox bodyMenu = getArmorMenuObj(bodyPart);

	    if(!active)
	    {
		    bodyMenu.setVisible(false);
		    return;
	    }

	    int[] ind = mhagData.getArmorList(lowRank, blade, female, bodyPart);
	    int num = ind.length;
	    String[] name = mhagData.getArmorListMenu(bodyPart, female, num, ind);

	    ArrayList toolTips = new ArrayList();

	    bodyMenu.removeAllItems();

	    //first null entry
	    bodyMenu.addItem(name[0]);
	    toolTips.add("---");
	    for(int i = 1; i < num; i++)
	    {
		    bodyMenu.addItem(name[i]);
		    Armor armor = mhagData.getArmor(bodyPart, ind[i]);
		    toolTips.add(armor.getToolTips());
	    }

	    rendererArmor[bodyPart].setTooltips(toolTips);
	    bodyMenu.setVisible(true);

    }

    public void changeJewelSlot(int bodyPart, int slotInd,
	    boolean lowRank, int nSlot, boolean active)
    {
	    int[] jewelIndOld = new int[3];
	    for (int i = 0; i < 3; i++)  //walkaround,,removeAllItems() kills some jewelInd ata
		    jewelIndOld[i] = jewelInd[bodyPart][i];

	    JComboBox jewelSlot = getJewelSlotObj(bodyPart, slotInd);

	    if(!active)
	    {
		    jewelSlot.setVisible(false);
		    return;
	    }

	    int[] ind = mhagData.getJewelList(lowRank, nSlot);
	    int num = ind.length;

	    jewelSlot.removeAllItems();
	    ArrayList toolTips = new ArrayList();

	    jewelSlot.addItem("---"); //1st null item
	    toolTips.add("---");
	    for(int i = 1; i < num; i++)
	    {
 		    Jewel jewel = mhagData.getJewel(ind[i]);
		    jewelSlot.addItem(jewel.getJewelNameSkill());
		    toolTips.add(jewel.getJewelToolTips());
	    }
	    renderer[bodyPart][slotInd].setTooltips(toolTips);
	    jewelSlot.setVisible(true);

	    // keep the jewel ID if previously active
	    for (int i = 0; i < 3; i++) //walkaround
		    jewelInd[bodyPart][i] = jewelIndOld[i];

	    int[] indOld = mhagData.getJewelList(lowRank, jewelMenuType[bodyPart][slotInd]);

	    int id = indOld[jewelInd[bodyPart][slotInd]];
	    if(id != -1 )
	    {
		    for (int i = 1; i < num; i++)
		    {
			    if(ind[i] == id)
			    {
				    jewelSlot.setSelectedIndex(i);
				    jewelInd[bodyPart][slotInd] = i;
				    break;
			    }
		    }
	    }

	    jewelMenuType[bodyPart][slotInd] = nSlot;
    }

    public void changeCharmSkill(int skillNo,String skillClass, boolean active)
    {

	    JComboBox skillSlot;
	    JLabel skillLabel;
	    int exception;
	    if(skillNo == 0)
	    {
		    skillSlot = charmSkill1;
		    skillLabel = skillPoint1;
		    exception = set.getCharmSkillID()[1];
	    }
	    else
	    {
		    skillSlot = charmSkill2;
		    skillLabel = skillPoint2;
		    exception = set.getCharmSkillID()[0];
	    }

	    if(!active)
	    {
		    skillSlot.setVisible(false);
		    skillLabel.setVisible(false);
		    return;
	    }

		int[] ind = mhagData.getSkillList(skillClass, exception);
		int num = ind.length;

		skillSlot.removeAllItems();
		//skillSlot.addItem("---"); //No 1st null item
		int selectedInd = 0;
		for(int i = 0; i < num; i++)
		{
			Skill skill = mhagData.getSkill(ind[i]);
			skillSlot.addItem(skill.getSkillName());
			if(skill.getSkillID() == set.getCharmSkillID()[skillNo])
			{
				skillSlot.setSelectedIndex(i);
				selectedInd = i;
			}
		}

	    skillSlot.setVisible(true);
	    skillLabel.setVisible(true);
	    set.setCharmSkillID(skillNo,ind[selectedInd]);

    }

    public void changeCharmMenu(boolean lowRank)
    {

		int[] ind = mhagData.getCharmList(lowRank);
		int num = ind.length;

		charmMenu.removeAllItems();
		charmMenu.addItem("---"); //1st null item
		for(int i = 1; i < num; i++)
		{
			Charm charm = mhagData.getCharm(ind[i]);
			charmMenu.addItem(charm.getCharmName());
		}

	   charmMenu.setVisible(true);

    }

    public void initSetup(boolean lowRank, boolean blade, boolean female)
    {
	    for(int i = 0; i < 5; i++)
		    changeArmorMenu(i, lowRank, blade, female, true);

	    for(int i = 0; i < 7; i++)
	    {
		    for(int j = 0; j < 3; j++) // number 1-3
		    {
			changeJewelSlot(i, j, lowRank, 0, false);
		    }
	    }

	    weaponMenu.setSelectedIndex(0);  //reset Weapon menu

	    changeCharmMenu(lowRank);

	    for(int i = 0; i < 2; i++)
		    changeCharmSkill(i, "D", false);

    }

    public void changeGender(boolean lowRank, boolean blade, boolean female)
    {
	    adjust = true;
	    for(int i = 0; i < 5; i++)
	    {
		    JComboBox bodyMenu = getArmorMenuObj(i);

		    int entryOld = bodyMenu.getSelectedIndex();
		    int[] indOld = mhagData.getArmorList(lowRank, blade, !female, i);

		    int[] ind = mhagData.getArmorList(lowRank, blade, female, i);
		    int num = ind.length;
		    String[] name = mhagData.getArmorListMenu(i, female, num, ind);

		    bodyMenu.removeAllItems();
		    for(int j = 0; j < num; j++)
		    {
			    bodyMenu.addItem(name[j]);
			    if(ind[j] == indOld[entryOld])
			    {
				    bodyMenu.setSelectedIndex(j);
			    }
		    }
	    }
	    adjust = false;

    }

    public void calSetGUI()
    {
	   //boolean pass = set.checkSet(mhag, mhagData);  //check set
	   //if(!pass)
	   //{
	   //	   System.out.println("Error! Please Check!");
	   //      MhagUtil.logLine(mhag, "Error! Please Check!");
	   //}
	    String name = jTextSetName.getText();
	    set.setSetName(name);

	   set.calcSet(mhag, mhagData);   //calculate set

	   stream.reset();
  	   set.save(mhag, mhagData, stream);  // save results
	   stream.rewind();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                MhagGui mhagGui = new MhagGui();

		try {
			mhagGui.initMhag();  // initialize mhag
		} catch (FileNotFoundException ex) {
			Logger.getLogger(MhagGui.class.getName()).log(Level.SEVERE, null, ex);
		}

		mhagGui.stream = new TextAreaPrintStream(mhagGui.jTextPreview, System.out);
	        mhagGui.streamView = new TextAreaPrintStream(mhagGui.jTextPreview2, System.out);

		mhagGui.setVisible(true);

		mhagGui.initSetup(false, true, false); // by default

		mhagGui.jTextUsage.setCaretPosition(0);
		mhagGui.jTabbedPane1.setEnabledAt(2, false);

            }
        });
    }

    	// GUI static MHAG
    	private Mhag mhag = new Mhag();
    	private Set set = new Set();
    	private MhagData mhagData = new MhagData();
	private TextAreaPrintStream stream, streamView;
	private int[][] jewelInd = new int[7][3]; //jewel index in each jewel button list
	private int[][] jewelMenuType = new int[7][3]; //menu type in each jewel button position
	private boolean adjust = false; // adjust menu, don't perform calculation
	int saveOpt =0;  //save option for GUI

	private ComboboxToolTipRenderer[][] renderer = new ComboboxToolTipRenderer[7][3];
	//renderer for slot menu tooltips
	private ComboboxToolTipRenderer[] rendererArmor = new ComboboxToolTipRenderer[5];

	private boolean codeBookInUse = false;
	private DefaultListModel listModel =  new DefaultListModel(); //viewer code list

	private String[] deletedCodes = new String[5]; //store deleted codes;

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton Output;
        private javax.swing.JPanel about;
        private javax.swing.JComboBox armSlot1;
        private javax.swing.JComboBox armSlot2;
        private javax.swing.JComboBox armSlot3;
        private javax.swing.JLabel armsLabel;
        private javax.swing.JComboBox armsMenu;
        private javax.swing.JRadioButton blade;
        private javax.swing.ButtonGroup buttonGroup1;
        private javax.swing.JPanel calculator;
        private javax.swing.JLabel charmLabel;
        private javax.swing.JComboBox charmMenu;
        private javax.swing.JComboBox charmSkill1;
        private javax.swing.JComboBox charmSkill2;
        private javax.swing.JLabel charmSkillLabel;
        private javax.swing.JComboBox charmSlot1;
        private javax.swing.JComboBox charmSlot2;
        private javax.swing.JComboBox charmSlot3;
        private javax.swing.JLabel chestLabel;
        private javax.swing.JComboBox chestMenu;
        private javax.swing.JComboBox chestSlot1;
        private javax.swing.JComboBox chestSlot2;
        private javax.swing.JComboBox chestSlot3;
        private javax.swing.JRadioButton code;
        private javax.swing.JPanel codeBook;
        private javax.swing.JButton codeBookLoad;
        private javax.swing.JTextField codeBookName;
        private javax.swing.JButton codeBookSave;
        private javax.swing.JList codeList;
        private javax.swing.JPanel convert;
        private javax.swing.JRadioButton convertHTML;
        private javax.swing.JRadioButton convertTEXT;
        private javax.swing.JButton deleteInteract;
        private javax.swing.JRadioButton female;
        private javax.swing.JPanel generator;
        private javax.swing.JButton getSetInteract;
        private javax.swing.JRadioButton gunner;
        private javax.swing.JLabel headLabel;
        private javax.swing.JComboBox headMenu;
        private javax.swing.JComboBox headSlot1;
        private javax.swing.JComboBox headSlot2;
        private javax.swing.JComboBox headSlot3;
        private javax.swing.JRadioButton highRank;
        private javax.swing.JRadioButton html;
        private javax.swing.JPanel hunterType;
        private javax.swing.ButtonGroup hunterTypeGroup;
        private javax.swing.JEditorPane jEditorAbout;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JScrollPane jScrollAbout;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPreview;
        private javax.swing.JScrollPane jScrollPreview2;
        private javax.swing.JScrollPane jScrollUsage;
        private javax.swing.JTabbedPane jTabbedPane1;
        private javax.swing.JTextField jTextData;
        private javax.swing.JTextArea jTextPreview;
        private javax.swing.JTextArea jTextPreview2;
        private javax.swing.JTextField jTextSetName;
        private javax.swing.JTextArea jTextUsage;
        private javax.swing.JComboBox legSlot1;
        private javax.swing.JComboBox legSlot2;
        private javax.swing.JComboBox legSlot3;
        private javax.swing.JLabel legsLabel;
        private javax.swing.JComboBox legsMenu;
        private javax.swing.JButton loadSetInteract;
        private javax.swing.JRadioButton lowRank;
        private javax.swing.JRadioButton male;
        private javax.swing.JPanel output;
        private javax.swing.ButtonGroup outputGroup;
        private javax.swing.JPanel rank;
        private javax.swing.ButtonGroup rankGroup;
        private javax.swing.JButton saveOutput;
        private javax.swing.JPanel setNamePanel;
        private javax.swing.JPanel setup;
        private javax.swing.JPanel sex;
        private javax.swing.ButtonGroup sexGroup;
        private javax.swing.JLabel skillPoint1;
        private javax.swing.JLabel skillPoint2;
        private javax.swing.JRadioButton text;
        private javax.swing.JButton undoInteract;
        private javax.swing.JPanel viewer;
        private javax.swing.JLabel waistLabel;
        private javax.swing.JComboBox waistMenu;
        private javax.swing.JComboBox waistSlot1;
        private javax.swing.JComboBox waistSlot2;
        private javax.swing.JComboBox waistSlot3;
        private javax.swing.JLabel weaponLabel;
        private javax.swing.JComboBox weaponMenu;
        private javax.swing.JComboBox weaponSlot1;
        private javax.swing.JComboBox weaponSlot2;
        private javax.swing.JComboBox weaponSlot3;
        // End of variables declaration//GEN-END:variables

}
